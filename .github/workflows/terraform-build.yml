name: "Build EKS with terraform"

on:
  workflow_dispatch:

env:
 # verbosity setting for Terraform logs
 TF_LOG: INFO
 # Credentials for deployment to AWS
 AWS_ACCESS_KEY_ID: ${{ secrets.AWS_PROD_USER }}
 AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_PROD_KEY }}
 # S3 bucket for the Terraform state
 BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE}}


jobs:
  build-terraform:
    name: "Terraform Infrastructure Build"

    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        # We keep Terraform files in the terraform directory.
        working-directory: ./terraform

    steps:
      - uses: actions/checkout@v3

      # This step sets up the Terraform environment
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.4

      # This step initializes the Terraform working directory
      - name: Terraform init
        id: init
        run: terraform init -backend-config="bucket=$BUCKET_TF_STATE"

      - name: Terraform validate
        id: validate
        run: terraform validate

      - name: Terraform plan
        id: plan
        run: terraform plan -no-color -input=false -out=tfplan
        continue-on-error: true



      #- name: Do Unit Tests
      #  id: unit
      #  if: github.event_name == 'pull_request' && github.event.action == 'opened' && github.base_ref == 'STAGING'
      #  run: echo "Hello World"


      - uses: actions/github-script@v6
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            
            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      # This step applies the Terraform configuration to the staging environment
      - name: Terraform apply prod
        run: |
          terraform apply -auto-approve "tfplan"
          echo "::set-output name=cluster_endpoint::$(terraform output cluster_endpoint)"
          echo "::set-output name=cluster_security_group_id::$(terraform output cluster_security_group_id)"
          echo "::set-output name=region::$(terraform output region)"
          echo "::set-output name=cluster_name::$(terraform output cluster_name)"
