name: untested, Deploy to Amazon ECS and cleanup

on:
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_PROD_USER }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_PROD_KEY }}
      AWS_REGION: us-west-2

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Build Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        file: Dockerfile
        push: true
        tags: ${{ secrets.DOCKER_IMAGE }}
        build-args: |
          APP_NAME=my-app
          APP_PORT=8080

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1

    - name: Push Docker image to Amazon ECR
      run: |
        docker tag ${{ secrets.DOCKER_IMAGE }} ${{ secrets.DOCKER_IMAGE }}:latest
        docker push ${{ secrets.DOCKER_IMAGE }}:latest

    - name: Deploy to Amazon ECS
      uses: aws-actions/amazon-ecs-deploy@v1
      with:
        cluster: ${{ secrets.ECS_CLUSTER_NAME }}
        service: ${{ secrets.ECS_SERVICE_NAME }}
        image: ${{ secrets.DOCKER_IMAGE }}:latest
        container-name: ${{ secrets.CONTAINER_NAME }}
        container-port: 8080

    - name: Save logs to CloudWatch Logs
      run: |
        aws logs create-log-group --log-group-name my-app-logs
        aws ecs describe-tasks --cluster ${{ secrets.ECS_CLUSTER_NAME }} --tasks "$(aws ecs list-tasks --cluster ${{ secrets.ECS_CLUSTER_NAME }} --service-name ${{ secrets.ECS_SERVICE_NAME }} --desired-status RUNNING --output text | cut -f 2)" --output json | jq -r '.tasks[].containers[].taskArn' | xargs -I {} aws logs create-log-stream --log-group-name my-app-logs --log-stream-name {}

    - name: Create Lambda function from S3
      uses: aws-actions/aws-cli@v1
      with:
        args: |
          s3 cp s3://${{ secrets.S3_BUCKET_NAME }}/lambda_function.py /tmp/lambda_function.py
          aws lambda create-function \
            --function-name my-lambda-function \
            --runtime python3.8 \
            --handler lambda_function.lambda_handler \
            --role ${{ secrets.LAMBDA_EXECUTION_ROLE_ARN }} \
            --zip-file fileb:///tmp/lambda_function.py
      id: create-lambda-function

    - name: Schedule environment destruction
      uses: aws-actions/aws-cli@v1
      with:
        args: events put-rule --name "destroy-environment-${{ github.run_id }}" --schedule-expression "rate(48 hours)"
      id: put-rule

    - name: Get rule ARN
      uses: aws-actions/aws-cli@v1
      with:
        args: events describe-rule --name "destroy-environment-${{ github.run_id }}"
      id: describe-rule
      continue-on-error: true

    - name: Add permission for Lambda to delete ECS environment
      uses: aws-actions/aws-lambda-add-permission@v1
      with:
        statement_id: ${{ github.run_id }}
        action: "lambda:InvokeFunction"
        principal: events.amazonaws.com

