name: Terraform Workflow

on:
  pull_request:
    branches:
      - STAGING
      - master
    paths:
    - terraform/**

env:
 # verbosity setting for Terraform logs
 TF_LOG: INFO
 # Credentials for deployment to AWS
 AWS_ACCESS_KEY_ID: ${{ secrets.AWS_PROD_USER }}
 AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_PROD_KEY }}
 # S3 bucket for the Terraform state
 BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE}}


jobs:
  build-terraform:
    name: "Terraform Infrastructure Build"

    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        # We keep Terraform files in the terraform directory.
        working-directory: ./terraform

    steps:
      - uses: actions/checkout@v3

      # This step sets up the Terraform environment
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.4

      # This step initializes the Terraform working directory
      - name: Terraform init
        id: init
        run: terraform init -backend-config="bucket=$BUCKET_TF_STATE"

      - name: Terraform validate
        if: github.event_name == 'pull_request' && github.event.action == 'opened'
        id: validate
        run: terraform validate


      - name: Terraform plan
        id: plan
        if: github.event_name == 'pull_request' && github.event.action == 'opened'
        run: terraform plan -no-color -input=false
        continue-on-error: true


      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request' && github.event.action == 'opened'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            
            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1


      # This step applies the Terraform configuration to the staging environment
      - name: Terraform apply to staging
        if: github.event_name == 'pull_request' && github.event.action == 'opened' && github.base_ref == 'STAGING'
        env:
          TF_VAR_environment: STAGING
        run: |
          terraform apply -auto-approve
          echo "::set-output name=apply-successful::true"


      # This step destroys the Terraform environment upon closing a pull request against the staging branch
      - name: Terraform destroy staging
        if: github.event.action == 'merged' && github.base_ref == 'STAGING'
        env:
          TF_VAR_environment: STAGING
        run: |
          if [ "${{ github.event.pull_request.merged }}" = "true" ]; then
            terraform destroy -auto-approve
          else
            echo "Pull request not merged, skipping Terraform destroy."
          fi


      # This step applies the Terraform configuration to the master environment if the staging apply was successful
      - name: Terraform apply to master
        if: github.event_name == 'pull_request' && github.event.action == 'merged' && github.head_ref == 'STAGING' && github.event.pull_request.merged == true && steps.terraform_apply_to_staging.outputs.apply-successful == 'true'

        env:
          TF_VAR_environment: master
        run: terraform apply -auto-approve
